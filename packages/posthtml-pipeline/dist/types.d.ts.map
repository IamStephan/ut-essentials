{"mappings":";AAGA;IACE,eAAe,CAAC,EAAE,KAAK,CAAC,CAAC,IAAI,EAAE,IAAI,EAAE,QAAQ,EAAE,KAAK,CAAC,GAAG,CAAC,KAAK,IAAI,CAAC,CAAA;IACnE,OAAO,CAAC,EAAE,KAAK,CAAC,OAAO,IAAI,CAAC,CAAC,CAAA;CAC9B;AAQD,QAAA,MAAM,eAAe,YAAa,QAAQ,YAAY,IAAI,kEAgCzD,CAAA;AAED,eAAe,eAAe,CAAA","sources":["packages/posthtml-pipeline/index.ts"],"sourcesContent":["import { Node, Plugin } from 'posthtml'\nimport * as yup from 'yup'\n\ninterface IOptions {\n  pipelinePlugins?: Array<(tree: Node, messages: Array<any>) => Node>\n  plugins?: Array<Plugin<Node>>\n}\n\nconst LOOP_LIMIT = 50\n\nconst AlteredDomMessageSchema = yup.object({\n  type: yup.string().oneOf(['altered_dom']).required(),\n})\n\nconst PostHTMLExtends = (options: IOptions) => (tree: Node) => {\n  const pipelinePlugins = options.pipelinePlugins ?? []\n  const plugins = options.plugins ?? []\n\n  let messages: Array<any> = []\n  let _tree = tree\n  let isComplete = false\n  let loopCounter = 0\n\n  while (!isComplete && loopCounter <= LOOP_LIMIT) {\n    isComplete = true\n    loopCounter++\n\n    pipelinePlugins.forEach((plugin) => {\n      _tree = plugin(_tree, messages) as any\n    })\n\n    plugins.forEach((plugin) => {\n      _tree = plugin(_tree) as any\n    })\n\n    messages = messages.map((message) => {\n      if (AlteredDomMessageSchema.isValidSync(message)) {\n        isComplete = false\n        return null\n      }\n\n      return message\n    })\n  }\n\n  return _tree\n}\n\nexport default PostHTMLExtends\n"],"names":[],"version":3,"file":"types.d.ts.map"}