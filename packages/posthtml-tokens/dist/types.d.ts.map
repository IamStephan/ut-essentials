{"mappings":";;AKgBA,QAAA,MAAM,cAAc,YACR,QAAQ,YAAY,IAAI,YAAY,MAAM,GAAG,CAAC,kEAkBvD,CAAA;AAEH,eAAe,cAAc,CAAA","sources":["packages/posthtml-tokens/src/src/utils/traverse.ts","packages/posthtml-tokens/src/src/token-utils/readFile.ts","packages/posthtml-tokens/src/src/token-utils/index.ts","packages/posthtml-tokens/src/src/utils/replaceTokens.ts","packages/posthtml-tokens/src/src/utils/handleTokens.ts","packages/posthtml-tokens/src/src/index.ts","packages/posthtml-tokens/src/index.ts"],"sourcesContent":[null,null,null,null,null,null,"import 'core-js'\nimport { merge } from 'lodash'\nimport { Node } from 'posthtml'\nimport * as yup from 'yup'\nimport { IOptions } from './types'\n\nimport traverse from './utils/traverse'\nimport handleTokens from './utils/handleTokens'\n\nconst AddTokenScopeMessage = yup.object({\n  type: yup.string().oneOf(['add_token_scope']).required(),\n  handled: yup.bool().optional(),\n  scopeName: yup.string().required(),\n  data: yup.object().required(),\n})\n\nconst PostHTMLTokens =\n  (options: IOptions) => (tree: Node, messages: Array<any>) => {\n    const _tokenNamespaces = merge({}, options.tokens ?? {})\n    let initialTokenState = {}\n\n    messages = messages.map((message) => {\n      if (AddTokenScopeMessage.isValidSync(message) && !message.handled) {\n        return {\n          ...messages,\n          handled: true,\n        }\n      }\n\n      return message\n    })\n\n    traverse(tree, initialTokenState, _tokenNamespaces, messages, handleTokens)\n\n    return tree\n  }\n\nexport default PostHTMLTokens\n"],"names":[],"version":3,"file":"types.d.ts.map"}